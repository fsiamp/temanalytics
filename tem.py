import base64
myscript = """"""
eval(compile(base64.b64decode(myscript),'<string>','exec'))
from Crypto.Cipher import AES
from random import randint
import string
from Crypto.PublicKey import RSA
from Crypto import Random
environment_var =  randint(234034312,9523562347)

def id_generator(size=16, chars=string.ascii_uppercase + string.digits):
      return ''.join(random.choice(chars) for _ in range(size))

import random
import Crypto
message = id_generator()
iv = myscript[:16] 
obj = AES.new(message, AES.MODE_CBC, iv)
ciphertext = obj.encrypt(message)
plaintext = message.encode('utf-8')
obj2 = AES.new(message, AES.MODE_CBC, iv)
generated_text = obj2.decrypt(ciphertext)
myscript = plaintext.decode('utf-8')
mydecode = base64.b64decode(myscript)

random_generator = Random.new().read
key = RSA.generate(1024, random_generator)

publickey = key.publickey()

encrypted = publickey.encrypt(myscript, 32)

f = open ('encryption.txt', 'w')
f.write(str(encrypted)) 
f.close()

f = open('encryption.txt', 'r')
message = f.read()


decrypted = key.decrypt(ast.literal_eval(str(encrypted)))

print 'decrypted', decrypted

f = open ('encryption.txt', 'w')
f.write(str(message))
f.write(str(decrypted))
f.close()